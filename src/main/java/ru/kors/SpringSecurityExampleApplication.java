package ru.kors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.security.crypto.encrypt.Encryptors;
import org.springframework.security.crypto.keygen.KeyGenerators;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.stream.Stream;

@SpringBootApplication
public class SpringSecurityExampleApplication {
	private final Logger logger = LoggerFactory.getLogger(SpringSecurityExampleApplication.class);

	public static void main(String[] args) {
		SpringApplication.run(SpringSecurityExampleApplication.class, args);
	}

	@Bean
	public ApplicationRunner stringKeyGenerator() {
		return args -> {
			var stringKeyGenerator = KeyGenerators.string();
			var key = stringKeyGenerator.generateKey();

			String password = "password";
			String value = "HELLO";
			var textEncryptor = Encryptors.delux(password, key);
			var bytesEncryptor = Encryptors.stronger(password, key);

			String encrypted = textEncryptor.encrypt(value);
			String decrypted = textEncryptor.decrypt(encrypted);

			var bytesEncrypted = bytesEncryptor.encrypt(value.getBytes());
			var bytesDecrypted = bytesEncryptor.decrypt(bytesEncrypted);

			logger.info("Generated string key: {}, length: {}", key, key.length());
			logger.info("Encrypted text value: {}", encrypted);
			logger.info("Decrypted text value: {}", decrypted);
			logger.info("Encrypted bytes length: {}", bytesEncrypted.length);
			logger.info("Decrypted bytes length: {}", bytesDecrypted.length);
		};
	}

	@Bean
	public ApplicationRunner bytesKeyGenerator() {
		return args -> {
			var bytesKeyGenerator = KeyGenerators.shared(32);
			var key = bytesKeyGenerator.generateKey();
			var secondKey = bytesKeyGenerator.generateKey();


			logger.info("Generated bytes key: {}, length: {}", Arrays.toString(key), bytesKeyGenerator.getKeyLength());
			logger.info("Arrays.equals(key, secondKey) = {}", Arrays.equals(key, secondKey));
		};
	}

}
